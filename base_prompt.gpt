# GUIDELINE FILE: This file contains the project description and instructions.
# Please use it as the base prompt for all operations.

In general, please provide a brief summary comment of maximum 100 words on each file you create of the types: (.py, .dart, .js, .tsk).

## How to execute a prompts

You are an Flutter expert.
You always use riverpod as state menagement and split widgets into a view and a viewmodel with the provider (MVVM).
Please dont use setState, we always want our own riverpod state management. If something with logic happens, build a funciotn in the viewmodel for it and use that from the view.
You can see how we want it in the ## Example structure section below.


## Example structure to see how we organize our files/classes/states

// viewmodel
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:logging/logging.dart';



## PROJECT STRUCTURE:

homeschool/
  .DS_Store
  base_prompt.gpt
  frontend/
    .DS_Store
    .metadata
    pubspec.lock
    README.md
    pubspec.yaml
    .gitignore
    frontend.iml
    .flutter-plugins-dependencies
    .flutter-plugins
    analysis_options.yaml
    test/
      widget_test.dart
    web/
      index.html
      favicon.png
      manifest.json
      icons/
        Icon-192.png
        Icon-maskable-192.png
        Icon-maskable-512.png
        Icon-512.png
    lib/
      .DS_Store
      main.dart
      util/
        ki_service.dart
      view_models/
        home_view_model.dart
      models/
        sachkunde_model.dart
        user_model.dart
        deutsch_model.dart
        mathe_model.dart
        englisch_model.dart
        naturwissenschaften_model.dart
      views/
        home_view.dart
        widgets/
          fach_sidebar.dart
          test_true_false.dart
          test_mc.dart
          ergebnis_dialog.dart
          test_input.dart
    assets/
      images/
        youtube.png
      texts/
        de.arb
        available_languages.txt
        en.arb
    .idea/
      .DS_Store
      workspace.xml
      modules.xml
      runConfigurations/
        main_dart.xml
      libraries/
        Dart_SDK.xml
        KotlinJavaRuntime.xml
  backend/
    .env
    tools/
    app/
      __init__.py
      main.py
      limiter.py
      results_data/
        demo_user_Mathematik.json
        demo_user_Englisch.json
      models/
        result_entry.py
      api/
        routes.py
      services/
        gpt_check.py
        gpt_tasks.py
    modules/
    store/
      meta/
  .vscode/
    settings.json
    launch.json


## FILE SUMMARIES:

### /Users/marcogrimme/Repository/homeschool/backend/app/__init__.py
Modified at Wed Apr 23 19:27:43 2025 | Lines: 0 | Tokens: 0:
Could not extract content from /Users/marcogrimme/Repository/homeschool/backend/app/__init__.py

### /Users/marcogrimme/Repository/homeschool/frontend/test/widget_test.dart
Modified at Wed Apr 23 19:26:47 2025 | Lines: 30 | Tokens: 264:
```json
{
  "Summary": "Dieses Dokument ist ein Flutter Widget-Test, der die Funktionalität eines Zählers überprüft. Die Testumgebung wird mit der WidgetTester-Klasse aus dem flutter_test-Paket eingerichtet. Der Test prüft, ob der Zähler initial bei 0 beginnt und ob er korrekt erhöht wird, wenn auf das '+'-Symbol geklickt wird. Der Test verifiziert, dass beim Klicken auf das Symbol der Zähler von 0 auf 1 erhöht wird. Diese Art von Tests dient dazu, sicherzustellen, dass die Benutzeroberfläche wie erwartet funktioniert und die Logik des Widgets korrekt implementiert ist.",
  "Document type": "Code file",
  "Meta": "Kein spezifisches Datum angegeben"
}
```

### /Users/marcogrimme/Repository/homeschool/frontend/README.md
Modified at Wed Apr 23 19:26:47 2025 | Lines: 16 | Tokens: 137:
```json
{
  "Summary": "Dieses Dokument ist eine Einführung in ein neues Flutter-Projekt und dient als Ausgangspunkt für die Entwicklung von Flutter-Anwendungen. Es enthält nützliche Ressourcen für Anfänger, einschließlich eines Links zu einem Labor, in dem das Schreiben der ersten Flutter-App erläutert wird, sowie zu einem Kochbuch mit nützlichen Flutter-Beispielen. Für weitere Informationen zur Flutter-Entwicklung wird auf die Online-Dokumentation verwiesen, die Tutorials, Beispiele, Anleitungen zur mobilen Entwicklung und eine vollständige API-Referenz bietet.",
  "Document type": "Dokumentation",
  "Meta": "Erstellt für das Flutter-Projekt, keine spezifischen Daten angegeben"
}
```

### /Users/marcogrimme/Repository/homeschool/frontend/analysis_options.yaml
Modified at Wed Apr 23 19:26:47 2025 | Lines: 28 | Tokens: 355:
```json
{
  "Summary": "Die Datei 'analysis_options.yaml' konfiguriert den statischen Analyzer für Dart-Code, um Fehler, Warnungen und Lints zu überprüfen. Sie unterstützt eine standardisierte Analyse, die in Dart-fähigen IDEs angezeigt wird und auch über die Befehlszeile mit 'flutter analyze' aufgerufen werden kann. Es werden empfohlene Lints aktiviert, um gute Programmierpraktiken in Flutter-Anwendungen und -Paketen zu fördern. Benutzer können die Lint-Regeln im Abschnitt 'linter' anpassen und bestimmte Regeln deaktivieren oder aktivieren. Weiterführende Informationen zur Anpassung und zu den verfügbaren Lints sind auf der Dart-Website verfügbar.",
  "Document type": "Code file",
  "Meta": "Letzte Änderung: Oktober 2023"
}
```

### /Users/marcogrimme/Repository/homeschool/frontend/web/manifest.json
Modified at Wed Apr 23 19:26:47 2025 | Lines: 35 | Tokens: 228:
```json
{
    "Summary": "Die Datei 'manifest.json' enthält Metadaten für eine Frontend-Anwendung, die mit Flutter entwickelt wurde. Wichtige Punkte sind: \n- Name: 'frontend' \n- Kurzer Name: 'frontend' \n- Start-URL: '.' \n- Anzeigeformat: 'standalone' \n- Hintergrundfarbe und Theme-Farbe: #0175C2 \n- Beschreibung: 'Ein neues Flutter-Projekt.' \n- Ausrichtung: 'portrait-primary' \n- Bevorzugung verwandter Anwendungen: false. \n- Enthält Icons in verschiedenen Größen (192x192, 512x512) und maskierbare Varianten.\nDie Struktur der Datei folgt dem JSON-Format und dient dem Zweck, die Benutzeroberfläche der Anwendung zu definieren und zu konfigurieren.",
    "Document type": "Code file",
    "Meta": "Erstellt für ein Flutter-Projekt"
}
```

### /Users/marcogrimme/Repository/homeschool/frontend/assets/texts/available_languages.txt
Modified at Thu May  1 12:32:31 2025 | Lines: 2 | Tokens: 6:
```json
{
  "Summary": "Die Datei enthält eine Liste verfügbaren Sprachen für ein digitales Produkt oder eine Anwendung. In diesem Fall sind die beiden enthaltenen Sprachen Englisch (en) und Deutsch (de). Es wird eine einfache Struktur verwendet, um die Sprachoptionen klar und prägnant zu präsentieren.",
  "Document type": "Other",
  "Meta": "Die Datei enthält grundlegende Informationen zu unterstützten Sprachen, es gibt kein spezifisches Datum oder zusätzliche Kontextinformationen."
}
```

### /Users/marcogrimme/Repository/homeschool/frontend/lib/models/user_model.dart
Modified at Fri May  2 16:36:47 2025 | Lines: 24 | Tokens: 209:
```json
{
  "Summary": "Das Dokument enthält das Dart-Codefile für das UserModel, das relevante Nutzerdaten speichert, darunter userId, ausgewählte Klasse, Level und Fächer. Die Klasse definiert einen Konstruktor mit Standardwerten und ermöglicht durch die Methode 'copyWith' die Erstellung einer neuen Instanz mit modifizierten Werten, ohne die bestehenden Daten zu verändern. Dies ist nützlich für funktionale Programmierung und zur unkomplizierten Aktualisierung von User-Daten im Backend.",
  "Document type": "Code file",
  "Meta": "Letzte Änderung: Oktober 2023"
}
```

### /Users/marcogrimme/Repository/homeschool/backend/app/results_data/demo_user_Englisch.json
Modified at Fri May  2 16:44:50 2025 | Lines: 22 | Tokens: 104:
```json
{
  "Summary": "Die Datei enthält eine JSON-Struktur mit Informationen über Englischunterricht. Hauptthema sind Vokabeln, wobei drei Fragen zu deutschen Wörtern gestellt werden: 'Apfel', 'Haus' und 'Katze'. Der Benutzer hat diese Begriffe korrekt ins Englische übersetzt ('apple', 'house', 'cat') und erhält für alle Antworten positives Feedback. Der Zeitstempel der Durchführung ist der 2. Mai 2025 um 16:44:50.",
  "Document type": "Dokumentation",
  "Meta": "Datum der Durchführung: 2025-05-02"
}
```

### /Users/marcogrimme/Repository/homeschool/backend/app/results_data/demo_user_Mathematik.json
Modified at Fri May  2 16:47:07 2025 | Lines: 62 | Tokens: 299:
```json
{
  "Summary": "Das Dokument ist eine JSON-Datei, die Ergebnisse von Mathematikaufgaben eines Benutzers dokumentiert. Es enthält Informationen zu den Themen Addition und Multiplikation, einschließlich der gestellten Fragen, der Benutzerantworten und des Feedbacks. Einige wichtige Punkte sind: \n\n- **Fach**: Mathematik \n- **Aufgaben**: \n  - Addition (z.B. 23 + 19) \n  - Multiplikation (z.B. 6 × 4) \n- **Benutzerantworten** sind überwiegend falsch, mit allen Antworten in den Beispielfragen falsch bewertet, die richtigen Lösungen wurden im Feedback angegeben. \n- **Zeitstempel** zeigen die Zeitpunkte der Antworten an (z.B. 2025-05-02). \n\nDie Datei dient zur Analyse der mathematischen Fähigkeiten eines Benutzers und zur Bereitstellung gezielten Feedbacks zur Verbesserung.",
  "Document type": "Andere",
  "Meta": "Datum: 2025-05-02"
}
```

### /Users/marcogrimme/Repository/homeschool/frontend/lib/views/widgets/ergebnis_dialog.dart
Modified at Fri May  2 16:44:09 2025 | Lines: 194 | Tokens: 2240:
```json
{
  "Summary": "Die Datei 'ergebnis_dialog.dart' definiert die Klasse ErgebnisDialog, die ein benutzerdefiniertes Dialogfenster für die Anzeige von Ergebnissen zu einem aktiven Fach erstellt. Der Dialog zeigt die Ergebnisse an, einschließlich der Themen, Zeitstempel und Fragen der Benutzer, sowie des Feedbacks zu den Antworten. Eine Hilfsfunktion korrigiert Zeichenkodierungsfehler bei deutschen Umlauten, um die Anzeige der Texte zu optimieren. Der Aufbau umfasst verschiedene UI-Elemente, um die Daten dargestellt und leserlich zu präsentieren, einschließlich der Verwendung von Card-Widgets für jedes Ergebnis. Eine Schaltfläche erlaubt es dem Nutzer, den Dialog zu schließen. Der Dialog ist so gestaltet, dass er in einer dunklen Farbpalette ansprechend wirkt.",
  "Document type": "Code file",
  "Meta": "Letzte Änderung: Oktober 2023"
}
```

### /Users/marcogrimme/Repository/homeschool/backend/app/models/result_entry.py
Modified at Fri May  2 16:59:43 2025 | Lines: 43 | Tokens: 351:
```json
{
  "Summary": "Das Dokument definiert das Datenmodell für Ergebnis-Einträge in einer pädagogischen Anwendung. Es beschreibt die Klasse 'ResultEntry', die Felder wie Fach, Thema, Fragen, Nutzereingaben, Feedback und einen Zeitstempel enthält. Die Funktion 'update_results_for_all_subjects' speichert die Ergebnisse eines Nutzers in einer JSON-Datei, die nach Nutzer-ID und Fach benannt ist. Sie prüft, ob die Datei bereits existiert und lädt die bestehenden Daten gegebenenfalls, bevor der neue Eintrag hinzugefügt und gespeichert wird. Fehler bei der Dateispeicherung werden protokolliert, um die Ursachen zu identifizieren und zu beheben.",
  "Document type": "Code file",
  "Meta": "Erstellt für eine Anwendung zur Verwaltung von Nutzerergebnissen, basierend auf dem Pydantic-Modell."
}
```

### /Users/marcogrimme/Repository/homeschool/frontend/lib/views/widgets/fach_sidebar.dart
Modified at Fri May  2 18:55:21 2025 | Lines: 67 | Tokens: 556:
```json
{
  "Summary": "Die Datei 'fach_sidebar.dart' enthält die Definition der Klasse 'FachSidebar', die als stateless Widget in einer Flutter-Anwendung dient. Hauptmerkmale der Klasse sind die Verwaltung von Fächern, die Auswahl aktiver Fächer und die Interaktion über eine Callback-Funktion 'onToggle'. Die Benutzeroberfläche besteht aus einer Container-Darstellung mit einer Liste von Fächern, die visuell hervorgehoben werden, wenn sie aktiv sind. Dadurch wird eine benutzerfreundliche Navigation zwischen Fächern ermöglicht. Die Datei nutzt Farben und Icons, um den Status der Fächer anzuzeigen und die Benutzererfahrung zu verbessern.",
  "Document type": "Code file",
  "Meta": "Letzte Änderung: Oktober 2023"
}
```

### /Users/marcogrimme/Repository/homeschool/frontend/web/index.html
Modified at Sat May  3 09:29:16 2025 | Lines: 76 | Tokens: 697:
```json
{
  "Summary": "Die HTML-Datei beschreibt die Webseite \"KiForKids\", eine Lernplattform für Kinder, die interaktive, KI-gestützte Aufgaben bietet. Wichtige Elemente sind: \n- **Meta-Tags** für Suchmaschinenoptimierung (SEO), die Schlüsselwörter wie \"Kinder lernen\" und \"interaktive Lerninhalte\" enthalten.\n- **Open Graph und Twitter Card Tags**, die eine ansprechende Vorschau der Webseite bei sozialen Medien gewährleisten.\n- Die Adresse der Organisation in Göttingen, Niedersachsen, sowie Links zu sozialen Medien.\n- Eine ansprechende Beschreibung der Plattform, die einen spielerischen Ansatz für das Lernen von Kindern fördert. \nDie Datei enthält zudem Verweise zu Icons und einem Manifest für mobile Webanwendungen.",
  "Document type": "Code file",
  "Meta": "Letzte Bearbeitung: Oktober 2023"
}
```

### /Users/marcogrimme/Repository/homeschool/backend/app/limiter.py
Modified at Sat May  3 17:02:09 2025 | Lines: 7 | Tokens: 50:
```json
{
  "Summary": "Die Datei enthält eine Instanz des 'Limiter'-Objekts aus der Bibliothek 'slowapi', die verwendet wird, um die Rate von API-Anfragen zu steuern und zirkuläre Importe innerhalb einer Anwendung zu vermeiden. Die Funktion 'get_remote_address' wird als Schlüsselgenerierungsfunktion für den Limiter verwendet, um die IP-Adresse des anfragenden Clients zu ermitteln. Dies sorgt dafür, dass die API-Last gleichmäßig verteilt und Missbrauch durch übermäßige Anfragen durch einen einzelnen Client verhindert wird.",
  "Document type": "Code file",
  "Meta": "Datei zur Regelung der API-Nutzung"
}
```

### /Users/marcogrimme/Repository/homeschool/frontend/lib/models/sachkunde_model.dart
Modified at Sat May  3 10:19:25 2025 | Lines: 96 | Tokens: 578:
```json
{
  "Summary": "Der SachkundeModel ist eine Dart-Klasse, die Aufgabenbereiche für die Sachkunde von Klassen 5 bis 13 an Gymnasien definiert. Die Klasse beinhaltet statische Listen für jede Jahrgangsstufe mit relevanten Themenbereichen, darunter Natur, Technik, Politik und Gesellschaft. Jede Klasse hat spezifische Themen, angepasst an den Lehrplan. Die Themen sind in einem Map-Format organisiert, um einen schnellen Zugriff auf die Inhalte zu ermöglichen und somit eine strukturierte Übersicht über die behandelten Sachgebiete zu bieten.",
  "Document type": "Code file",
  "Meta": "Erstellt für ein Bildungsprogramm zur Unterstützung der Lehrplangestaltung."
}
```

### /Users/marcogrimme/Repository/homeschool/frontend/lib/models/mathe_model.dart
Modified at Sat May  3 10:03:37 2025 | Lines: 96 | Tokens: 595:
```json
{
  "Summary": "Die Datei 'mathe_model.dart' definiert einen Dart-Code, der die mathematischen Themenbereiche für Schüler der Klassen 5 bis 13 am Gymnasium enthält. Für jede Klasse werden spezifische Themen in Form von Listen dargestellt, die Aufgabenbereiche wie 'Zahlen & Rechnen' (Klasse 5) oder 'Analysis: Abitur' (Klasse 13) abdecken. Alle Themen werden in einer Map zusammengefasst, die die Zuordnung von Klassen zu ihren jeweiligen Themen ermöglicht und somit eine strukturierte Übersicht über den Mathematikunterricht bietet.",
  "Document type": "Code file",
  "Meta": "Dieser Code bietet eine Grundlage für die Bildung von Übungsmaterialien im Bereich Mathematik."
}
```

### /Users/marcogrimme/Repository/homeschool/frontend/lib/models/englisch_model.dart
Modified at Sat May  3 10:16:46 2025 | Lines: 96 | Tokens: 565:
```json
{
  "Summary": "Der EnglischModel ist eine Dart-Klasse, die Lerninhalte für den Englischunterricht der Klassen 5 bis 13 am Gymnasium bereitstellt. Die Klasse definiert verschiedene Themenbereiche, die für jede Jahrgangsstufe relevant sind, einschließlich Grammatik, Leseverständnis, Textanalyse und schriftliche Ausdrucksformen. Jedes Jahr stellt spezifische Aufgabenbereiche zusammen, um die Schüler auf Prüfungen, insbesondere das Abitur, vorzubereiten. Die Struktur ermöglicht eine einfache Erweiterung oder Anpassung der Themen und bietet einen klaren Überblick über den Lehrplan für Lehrer und Schüler.",
  "Document type": "Code file",
  "Meta": "Dart-Datei für ein Schulmodell, das im Bildungskontext verwendet wird."
}
```

### /Users/marcogrimme/Repository/homeschool/frontend/lib/models/naturwissenschaften_model.dart
Modified at Sat May  3 10:18:17 2025 | Lines: 96 | Tokens: 572:
```json
{
  "Summary": "Das NaturwissenschaftenModel ist eine Dart-Klasse, die Aufgabenbereiche für das Fach Naturwissenschaften für die Klassen 5 bis 13 im Gymnasium definiert. Jede Klassenstufe hat eine eigene Liste von Themen, die die Schüler durch verschiedene Aspekte der Naturwissenschaften führen. Die Themen reichen von Lebewesen und Gesundheit in der 5. Klasse bis zu komplexen Konzepten wie Molekulargenetik und Quantenphysik in der 12. Klasse. Insgesamt werden zehn verschiedene Themen für jede Klasse angeboten, die den Lehrplan unterstützen und einen breiten Überblick über verschiedene naturwissenschaftliche Disziplinen geben. Strukturierte Daten werden in einer Map gespeichert, die die Klassen als Schlüssel und die entsprechenden Themenlisten als Werte enthält.",
  "Document type": "Code file",
  "Meta": "Erstellt für Bildungszwecke, keine speziellen Daten vorhanden."
}
```

### /Users/marcogrimme/Repository/homeschool/frontend/lib/views/widgets/test_input.dart
Modified at Sat May  3 15:23:11 2025 | Lines: 200 | Tokens: 1838:
```json
{
  "Summary": "Der Code definiert ein Flutter-Widget namens TestInput, das eine Freitext-Eingabe für Aufgaben ermöglicht. Es verwendet Provider zur Verwaltung von Zuständen und überprüft die eingegebenen Antworten mithilfe einer KI. Wichtige Funktionen umfassen das Erstellen von TextEditingControllers, das Prüfen der Antworten und das Bereitstellen von Feedback. Bei der Erstellung werden die Aufgaben, Akzent- und Kartenfarben sowie eine Callback-Funktion übergeben. Das Widget zeigt die Fragen an, erfasst die Eingaben des Benutzers und wertet diese aus. Das Layout beinhaltet visuelle Rückmeldungen über die Richtigkeit der Antworten. Außerdem gibt es Progress-Indikatoren und Ergebnisse, die die Nutzer über ihre Leistung informieren. Der Code ist durch eine klare Struktur in Klassen und Methoden gekennzeichnet, um die Wiederverwendbarkeit und Lesbarkeit zu fördern.",
  "Document type": "Code file",
  "Meta": "Datum: Oktober 2023"
}
```

### /Users/marcogrimme/Repository/homeschool/frontend/pubspec.yaml
Modified at Sat May  3 16:00:08 2025 | Lines: 38 | Tokens: 155:
```json
{
  "Summary": "Das Dokument ist eine YAML-Datei für ein Flutter-Projekt mit dem Namen 'frontend'. Es beschreibt die Projektumgebung und Abhängigkeiten. Die Flutter-Version ist auf ^3.7.2 festgelegt. Zu den wichtigsten Abhängigkeiten gehören 'flutter', 'cupertino_icons', 'flutter_riverpod' und 'go_router'. Zusätzlich werden Bibliotheken für das State Management, Routing und die Verwendung von APIs benötigt. Im Abschnitt 'dev_dependencies' sind Werkzeuge zum Testen und zur Code-Optimierung aufgeführt. Das Projekt verwendet Material Design und enthält Assets für Bilder und Texte.",
  "Document type": "Code file",
  "Meta": "Version: 1.0.0+1, keine Veröffentlichung geplant"
}
```

### /Users/marcogrimme/Repository/homeschool/frontend/lib/main.dart
Modified at Sat May  3 15:46:51 2025 | Lines: 22 | Tokens: 157:
```json
{
  "Summary": "Die Datei enthält den Hauptcode für eine Lernplattform namens 'KI-For-Kids', die mit dem Flutter-Framework entwickelt wurde. Sie verwendet Riverpod für das State-Management. Der Einstiegspunkt der Anwendung ist die Funktion 'main', die das Widget 'MyApp' innerhalb eines 'ProviderScope' bereitstellt. 'MyApp' ist ein stateless Widget, das eine MaterialApp erstellt, deren Design und Farbeinstellungen konfiguriert sind. Die Hauptansicht wird durch 'HomeView' dargestellt, während die Debug-Anzeige des Modus deaktiviert ist, um ein sauberes Benutzererlebnis zu gewährleisten. Die Anwendung nutzt modernste Material Design-Elemente, um die Benutzeroberfläche ansprechend zu gestalten.",
  "Document type": "Code file",
  "Meta": "Erstellt mit Flutter, Nutzung von Riverpod für State-Management."
}
```

### /Users/marcogrimme/Repository/homeschool/frontend/lib/views/home_view.dart
Modified at Sat May  3 17:13:55 2025 | Lines: 510 | Tokens: 6505:
```json
{
  "Summary": "Das Dokument beschreibt die Implementierung der 'HomeView'-Klasse in einer Flutter-Anwendung für eine strukturierte Lernplattform. Die Benutzeroberfläche umfasst: \n- Ein Header mit Titel und Untertitel sowie Auswahlmöglichkeiten für Klassen und Niveau. \n- Eine Sidebar zum Auswählen von Fächern und einen Content-Bereich zur Anzeige von Aufgaben. \n- Die Möglichkeit, zwischen verschiedenen Testmodi (Richtig/Falsch, Eingabe, Multiple Choice) zu wechseln. \n- Die initiale Begrüßung wird dynamisch geladen. \n- Die Benutzer können Aufgaben generieren, die durch einen KI-Service unterstützt werden. \n- Fehlerbehandlung, z.B. bei der Anzeige der Ergebnisse, ist implementiert. \n\nDie Struktur des Codes spiegelt ein fortgeschrittenes Flutter-Design wider, basierend auf dem Provider-Muster zur Zustandsverwaltung.",
  "Document type": "Code file",
  "Meta": "Date: Oktober 2023"
}
```

### /Users/marcogrimme/Repository/homeschool/frontend/lib/models/deutsch_model.dart
Modified at Sat May  3 10:06:32 2025 | Lines: 90 | Tokens: 550:
```json
{
  "Summary": "Das DeutschModel ist ein Dart-Code, der Lehrinhalte für das Fach Deutsch in den Klassen 5 bis 13 eines Gymnasiums definiert. Der Code enthält statische Listen, die verschiedene Themenbereiche für jede Jahrgangsstufe auflisten. Für jede Klasse werden spezifische Aspekte des Deutschunterrichts behandelt, darunter Wortarten, Satzbau, Rechtschreibung, Textinterpretation, Rhetorik und Medienkompetenz. Die Informationen sind in einem Map-Objekt strukturiert, das die Klassen als Schlüssel und die zugehörigen Themenlisten als Werte enthält. Dies ermöglicht eine einfache Zuordnung und Zugriff auf die Lehrinhalte je nach Jahrgangsstufe.",
  "Document type": "Code file",
  "Meta": "Dies ist eine strukturierte Datenrepräsentation für den Deutschunterricht, die als Grundlage für Lehrpläne oder Lernressourcen dienen kann."
}
```

### /Users/marcogrimme/Repository/homeschool/backend/app/api/routes.py
Modified at Sat May  3 17:02:03 2025 | Lines: 38 | Tokens: 327:
```json
{
  "Summary": "Das Dokument ist ein Code-File für eine FastAPI-Anwendung, das API-Routen für GPT-Dienste zur Generierung von Aufgaben und zur Überprüfung von Antworten definiert. Es umfasst zwei Haupt-Endpoints: \n\n- /generate_tasks: Erwartet JSON-Daten (Fach, Thema, Niveau, Testmodus, verwendete Fragen, Klassenthemen) und gibt eine Liste generierter Aufgaben zurück. Es gibt eine Anfragebegrenzung von 10 Anfragen pro Minute. \n- /check_answers: Erwartet JSON-Daten (Fach, Thema, Niveau, Fragen, Antworten) und liefert Feedback für die Antworten. Diese Route hat eine Begrenzung von 30 Anfragen pro Minute. Bei Fehlern wird eine HTTP-Exception mit dem Statuscode 500 ausgelöst.\n\nDie Nutzung eines globalen Limiters zur Kontrolle der Anzahl der Anfragen zeigt die Wichtigkeit von Performance und Stabilität in der API.",
  "Document type": "Code file",
  "Meta": "Entwickelt zur Nutzung mit FastAPI, keine spezifischen Daten angegeben"
}
```

### /Users/marcogrimme/Repository/homeschool/backend/app/main.py
Modified at Sat May  3 17:02:05 2025 | Lines: 69 | Tokens: 565:
```json
{
  "Summary": "Das bereitgestellte Python-Backend verwendet FastAPI zur Entwicklung einer API, die es Nutzern ermöglicht, Ergebnisübersichten pro Fach zu speichern und abzurufen. Ergebnisse werden in JSON-Dateien pro Nutzer und Fach gespeichert. Es gibt zwei Hauptendpunkte: einen POST-Endpunkt (/save_results/{user_id}) zum Speichern der Ergebnisse und einen GET-Endpunkt (/get_results/{user_id}/{fach}) zum Abrufen der gespeicherten Daten. Zusätzlich wird eine Ratenbegrenzung implementiert, um die Nutzung der API zu steuern. Der Code beinhaltet Middleware für CORS und Fehlerbehandlungen für übermäßige Anfragen. Die Struktur umfasst die Definition der ResultEntry-Datenmodelle und die Organisation der Daten in einem spezifischen Verzeichnis.",
  "Document type": "Code file",
  "Meta": "Letzte Aktualisierung: Oktober 2023"
}
```

### /Users/marcogrimme/Repository/homeschool/frontend/lib/views/widgets/test_true_false.dart
Modified at Sat May  3 15:23:14 2025 | Lines: 261 | Tokens: 2411:
```json
{
  "Summary": "Das Dokument enthält einen Widget-Code für Richtig/Falsch-Aufgaben in Flutter mit Riverpod-Anbindung. Der Widget \"TestTrueFalse\" ermöglicht es Benutzern, Aufgaben zu beantworten und die Antworten über KI-basierte Prüfmethoden zu überprüfen. Wichtigste Funktionen: 1. Initialisierung von Aufgaben und Auswahlmöglichkeiten. 2. Überprüfung der Antworten mit einer KI, die Feedback liefert. 3. Anzeige von Ergebnissen sowie die Möglichkeit, den Test zu beenden oder fortzufahren mit neuen Aufgaben. Das Layout umfasst Fragen in einer Scroll-Ansicht, Toggle-Buttons für die Antwortauswahl und visuelles Feedback für die Antworten. Logik inkludiert auch Methoden für die Aktualisierung des Widgets und die Verarbeitung von Benutzerinteraktionen. Es wird ein Zustand für die Anzeige des Ergebnisses und die Kontrolle des Fortschritts verwendet.",
  "Document type": "Code file",
  "Meta": "Flutter, Riverpod, Widget-Entwicklung, KI-Integration"
}
```

### /Users/marcogrimme/Repository/homeschool/backend/app/services/gpt_tasks.py
Modified at Sat May  3 16:49:44 2025 | Lines: 72 | Tokens: 695:
```json
{
  "Summary": "Das Dokument ist ein Python-Service-Modul zur Generierung von Aufgaben mithilfe der OpenAI GPT-API. Es lädt den API-Key aus einer .env-Datei und definiert eine asynchrone Funktion namens 'generate_tasks', die Aufgaben basierend auf einem übergebenen Daten-Dictionary erzeugt. Wichtige Parameter sind 'subject', 'topic', 'level', 'testMode', 'usedQuestions' und 'classTopics'. Die Funktion erstellt einen entsprechenden Prompt für GPT, um zehn spezifische Aufgaben zu generieren, die den angegebenen Kriterien entsprechen. Die Ergebnisse werden als nummerierte Liste zurückgegeben. Die robuste Verarbeitung ermöglicht die Erkennung verschiedener Nummerierungsformate und gewährleistet die Rückgabe gültiger Aufgaben selbst bei unerwarteten Eingaben.",
  "Document type": "Code file",
  "Meta": "Das Modul ist Teil eines größeren Backends für Bildungsanwendungen."
}
```

### /Users/marcogrimme/Repository/homeschool/frontend/lib/views/widgets/test_mc.dart
Modified at Sat May  3 15:23:12 2025 | Lines: 35 | Tokens: 235:
```json
{
  "Summary": "Das Dokument ist ein Code-File für ein Platzhalter-Widget in Flutter, das für Multiple-Choice-Tests verwendet wird. Es zeigt eine Liste von Aufgaben (tasks) an und enthält Stil- und Layout-Anpassungen über Farben und Textgrößen. Die Hauptkomponenten sind: 1. Eine Überschrift für den Test, die anzeigt, dass sich der Test in der Entwicklung befindet. 2. Eine dynamische Anzeige der Aufgaben mittels einer Schleife, die jede Aufgabe als Text mit Abstand anzeigt. 3. Ein Button, um den Test abzuschließen, wobei eine Callback-Funktion (onTestFinished) ausgeführt wird, wenn der Button gedrückt wird. Dieses Widget ist modular und kann in anderen Teilen der Anwendung wiederverwendet werden.",
  "Document type": "Code file",
  "Meta": "Erstellt zur Implementierung eines Multiple-Choice-Tests in einer Flutter-Anwendung"
}
```

### /Users/marcogrimme/Repository/homeschool/backend/app/services/gpt_check.py
Modified at Sat May  3 17:27:23 2025 | Lines: 77 | Tokens: 868:
```json
{
  "Summary": "Das Dokument ist ein Python-Code für einen Service zur KI-gestützten Prüfung von Schülerantworten mithilfe von OpenAI's GPT. Es lädt den API-Key aus einer .env-Datei und enthält eine asynchrone Funktion 'check_answers', die ein Dictionary mit den Feldern Fach, Thema, Niveau, Fragen und Antworten erwartet. Die Funktion erstellt einen Prompt für die KI, um Schülerantworten zu bewerten und entsprechend Feedback zu geben. Die Rückmeldungen erfolgen in einem festgelegten Format, wobei jede Antwort als 'richtig' oder 'falsch (richtige Lösung: ... )' gekennzeichnet wird. Der Code berücksichtigt einige Fehlerbehandlungen, um eine robuste Nutzung sicherzustellen, und protokolliert die Rohantworten von GPT zur Analyse. Insgesamt bietet das Modul eine automatisierte Möglichkeit zur korrekten Rückmeldung über Schülerleistungen.",
  "Document type": "Code file",
  "Meta": "Letzte Aktualisierung: Oktober 2023"
}
```

### /Users/marcogrimme/Repository/homeschool/frontend/lib/view_models/home_view_model.dart
Modified at Sat May  3 17:29:50 2025 | Lines: 381 | Tokens: 3189:
```json
{
  "Summary": "Der Code ist ein Teil einer Flutter-App, die für den Bildungsbereich gestaltet wurde. Die \"HomeViewModel\"-Klasse verwaltet den Zustand der Benutzeroberfläche und hält Informationen über Benutzer, gewählte Fächer, Themen und Aufgaben. Wichtige Funktionen umfassen die Erstellung von Aufgaben mithilfe eines KI-Services, die Überprüfung von Antworten und das Speichern von Ergebnissen im Backend. Das Datenmodell umfasst Klassen wie \"UserModel\" und \"ResultsEntry\", die Benutzerdaten und Ergebnisse speichern. Die Anwendung unterstützt mehrere Fächer (Mathematik, Deutsch, etc.) und Klassenstufen. Es gibt umfangreiche Methoden zur Verwaltung von Benutzerinteraktionen und zur Generierung sowie Bewertung von Aufgaben. Die Struktur ist so angelegt, dass sie eine reibungslose Benutzererfahrung im Lernprozess fördert.",
  "Document type": "Code file",
  "Meta": "Keine spezifischen zusätzlichen Notizen"
}
```

### /Users/marcogrimme/Repository/homeschool/frontend/lib/util/ki_service.dart
Modified at Sat May  3 17:29:31 2025 | Lines: 247 | Tokens: 3683:
```json
{
  "Summary": "Der KIService ist eine Dart-Klasse, die Aufgaben generiert und Ein-Wort-Antworten über die OpenAI API überprüft. Wichtige Punkte sind:  \n- Verwendung des GPT-4.1-nano Modells.  \n- Anpassung spezifischer Systemprompts je nach Fach (Mathematik, Deutsch, Englisch, Sachkunde, Naturwissenschaften).  \n- Generierung von Aufgaben gemäß den Lehrplänen für Gymnasien in Deutschland, mit dem Fokus auf ein Wort als Antwort.  \n- Methoden zur Erstellung von Aufgaben ('generateTasks') und zur Überprüfung von Antworten ('checkAnswers') sind implementiert.  \n- Antworten werden auf Richtigkeit geprüft und es wird Feedback gegeben, ob sie korrekt sind oder eine richtige Lösung bereitgestellt wird.  \nDie Korrekturmethodik ist positiv und unterstützend gestaltet.",
  "Document type": "Code file",
  "Meta": "Letzte Änderung: Oktober 2023"
}
```

## DEPENDENCIES:

name: frontend
description: "A new Flutter project."
publish_to: "none"
version: 1.0.0+1

environment:
  sdk: ^3.7.2

dependencies:
  flutter:
    sdk: flutter
  cupertino_icons: ^1.0.8
  flutter_riverpod: ^2.6.1
  go_router: ^15.1.1
  freezed_annotation: ^3.0.0
  build_runner: ^2.4.15
  shared_preferences: ^2.5.3
  flutter_dotenv: ^5.2.1
  vit_gpt_dart_api: ^5.1.0
  intl: ^0.20.2
  http: ^1.3.0
  logging: ^1.3.0

dev_dependencies:
  flutter_test:
    sdk: flutter

  flutter_lints: ^5.0.0
  freezed: ^3.0.1

flutter:
  uses-material-design: true

  generate: true

  assets:
    - assets/images/
    - assets/texts/
