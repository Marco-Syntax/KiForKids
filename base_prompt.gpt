# GUIDELINE: Diese Datei enth√§lt die Projektbeschreibung und Anweisungen.
# Bitte verwende sie als Basis-Prompt f√ºr alle Abl√§ufe im Projekt.

## So arbeitest du mit Prompts

Du bist ein erfahrener Flutter-Entwickler mit tiefem Verst√§ndnis f√ºr modernes App-Design.  
Arbeite ausschlie√ülich mit der **MVVM-Architektur**, verwende **Riverpod** (bevorzugt: **Riverpod 2**) als State-Management-L√∂sung und **verzichte vollst√§ndig auf `setState()`**.

Alle Logiken geh√∂ren ins **ViewModel**, der UI-Code bleibt **schlank**, **reaktiv** und **√ºbersichtlich**.  
Verwende **Freezed** f√ºr die Modellierung und State-Klassen, **flutter_hooks** nur, wenn es wirklich sinnvoll ist.  
Achte auf eine **klare Trennung** von **View**, **ViewModel** und **Service/Repository-Schichten**.

Entferne **toten Code (Dead Code)** konsequent, sobald er nicht mehr ben√∂tigt wird ‚Äì z.‚ÄØB. ungenutzte Imports, veraltete Variablen, Methoden oder Widgets.  
Der Code soll jederzeit **wartbar**, **schlank** und **lesbar** bleiben.

Schreibe **robusten**, **gut strukturierten** Code, der **erweiterbar**, **testbar** und **verst√§ndlich** ist.  
Halte dich an **Clean Code-Prinzipien** und verwende **moderne Flutter-Technologien**.

Falls UI-Beispiele gefragt sind:
- Sie sollen **responsive**, **barrierefrei** und **Material 3-konform** sein.
- Verwende **Composable Widgets** mit Fokus auf **Wiederverwendbarkeit**.

Du verwendest immer einen **@freezed Factory-Konstruktor** f√ºr deine ViewModels, um unver√§nderliche State-Klassen effizient und typsicher zu modellieren.  
Das erm√∂glicht eine saubere und nachvollziehbare Architektur in jeder Anwendung.  
Ein Beispiel findest du im Abschnitt **üì¶ Codebeispiele** weiter unten.

Beachte bitte das 'withOpacity' is deprecated and shouldn't be used. Use .withValues() to avoid precision loss.
Try replacing the use of the deprecated member with the replacement. immer correctColor.withValues(alpha: 0.15);
### üéØ Ziel:
> **Industrie-Standard** in Codequalit√§t, Architektur und Performance.

---

### üì¶ Codebeispiele
Nutze die folgenden Platzhalter, um Beispielcode einzuf√ºgen:

```dart
// üìç ViewModel-Beispiel
@freezed
class RegistrationState with _$RegistrationState {
  const factory RegistrationState({
    // UI state
    @Default(0) int currentPage,
    @Default(false) bool isRegistering,
    @Default(false) bool registrationSuccess,
    @Default(false) bool showPassword,
    @Default(false) bool showConfirmPassword,
    @Default(false) bool passwordFieldFocused,
    String? registrationError,
    @Default(false) bool showCompanyDataScrollbar,
    @Default(false) bool showSummaryScrollbar,
    @Default(false) bool validationAttempted, // Flag f√ºr den Validierungsstatus

    // Form data - Owner info
    @Default('') String firstName,
    @Default('') String lastName,
    @Default('') String email,
    @Default('') String phone,
    String? role,
    @Default('') String password,
    @Default('') String confirmPassword,

    // Session data
    String? sessionId,
  }) = _RegistrationState;

}
```

```dart
// üìç View-Beispiel
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:itsroad_frontend/login/activation_page_viewmodel.dart';
import 'package:itsroad_frontend/util/build_context_extensions.dart';

class ActivationPage extends ConsumerWidget {
  const ActivationPage({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final activationState = ref.watch(activationViewModelProvider);
    final activationViewModel = ref.read(activationViewModelProvider.notifier);

    return Scaffold(...);
  }

  // other widget/frontend related functions
}
```


## PROJECT STRUCTURE:

homeschool/
  .DS_Store
  .gitignore
  .env
  docker-compose.yml
  base_prompt.gpt
  frontend/
    .DS_Store
    .metadata
    pubspec.lock
    README.md
    pubspec.yaml
    .gitignore
    frontend.iml
    .flutter-plugins-dependencies
    .flutter-plugins
    analysis_options.yaml
    test/
      widget_test.dart
    web/
      index.html
      agb.html
      favicon.png
      manifest.json
      impressum.html
      sitemap.xml
      robots.txt
      datenschutz.html
      icons/
        Icon-192.png
        Icon-maskable-192.png
        Icon-maskable-512.png
        Icon-512.png
    lib/
      .DS_Store
      main.dart
      util/
        ki_service.dart
      view_models/
        home_view_model.freezed.dart
        home_view_model.dart
      providers/
      models/
        sachkunde_model.dart
        user_model.dart
        deutsch_model.dart
        mathe_model.dart
        englisch_model.dart
        naturwissenschaften_model.dart
      views/
        home_view.dart
        widgets/
          fach_sidebar.dart
          test_true_false.dart
          answer_button.dart
          test_mc.dart
          ergebnis_dialog.dart
          test_input.dart
    assets/
      images/
        header_1.png
        bg_3.png
        header.png
        proxy.png
      texts/
        de.arb
        available_languages.txt
        en.arb
    .idea/
      .DS_Store
      workspace.xml
      modules.xml
      runConfigurations/
        main_dart.xml
      libraries/
        Dart_SDK.xml
        KotlinJavaRuntime.xml
  backend/
    .DS_Store
    requirements.txt
    Dockerfile
    init.sql
    .dockerignore
    .gitignore
    results.db
    .env
    docker-compose.yml
    tools/
    app/
      .DS_Store
      database.py
      __init__.py
      main.py
      limiter.py
      results_data/
      models/
        request_models.py
        result.py
        result_entry.py
      api/
        routes.py
      services/
        gpt_check.py
        gpt_tasks.py
        result_service.py
    backend/
      results_data/
  .vscode/
    settings.json
    launch.json


## DEPENDENCIES:

name: frontend
description: "A new Flutter project."
publish_to: "none"
version: 1.0.0+1

environment:
  sdk: ^3.7.2

dependencies:
  flutter:
    sdk: flutter
  cupertino_icons: ^1.0.8
  flutter_riverpod: ^2.6.1
  go_router: ^15.1.1
  freezed_annotation: ^3.0.0
  build_runner: ^2.4.15
  shared_preferences: ^2.5.3
  flutter_dotenv: ^5.2.1
  vit_gpt_dart_api: ^5.1.0
  intl: ^0.20.2
  http: ^1.3.0
  logging: ^1.3.0
  uuid: ^4.5.1
  url_launcher: ^6.2.4

dev_dependencies:
  flutter_test:
    sdk: flutter

  flutter_lints: ^5.0.0
  freezed: ^3.0.1

flutter:
  uses-material-design: true

  generate: true

  assets:
    - assets/images/
    - assets/texts/
